// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  websites     Website[]
  activityLogs ActivityLog[]

  @@index([email, username])
  @@map("users")
}

model Website {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  about         String
  images        Image[]
  carouselItems CarouselItem[]
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isDefault     Boolean        @default(false) // Changed to isDefault for clarity

  @@unique([userId, isDefault])
  @@index([userId, name])
  @@map("websites")
}

model Image {
  id        Int        @id @default(autoincrement())
  src       String
  width     Int
  height    Int
  filename  String?
  filesize  Int?
  mimetype  String?
  websiteId Int
  website   Website    @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  imageTags ImageTag[]

  @@unique([websiteId, src])
  @@index([websiteId])
  @@map("images")
}

model CarouselItem {
  id        Int      @id @default(autoincrement())
  image     String
  title     String
  subtitle  String?
  active    Boolean  @default(true)
  order     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  websiteId Int
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, order]) // Prevent duplicate orders per website
  @@index([websiteId, order])
  @@map("carousel_items")
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  imageTags ImageTag[]
  createdAt DateTime   @default(now())
  @@map("tags")
}

model ImageTag {
  id      Int   @id @default(autoincrement())
  imageId Int
  tagId   Int
  image   Image @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([imageId, tagId])
  @@index([imageId])
  @@index([tagId])
  @@map("image_tags")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int? // Made optional for system actions
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String // "upload", "delete", "login", etc.
  details   String? // JSON string with additional details
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId, action])
  @@index([createdAt])
  @@map("activity_logs")
}
